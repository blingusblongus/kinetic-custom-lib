{"version":3,"sources":["lib/kd-typeahead/kd-typeahead.js","lib/kd-dataviewer/kd-dataviewer.js","lib/bundle/helpers/notifications.js","lib/bundle/helpers/index.js","globals.js"],"names":["$","_","moment","typeAheadSearch","form","element","find","each","typeaheadForm","input","this","typeaheadConfig","extend","typeaheadConfigurations","isEmpty","attr","parseInt","split","i","v","fname","fbridgedValue","bundle","kappLocation","K","slug","name","value","addtlParam","valToSet","toLowerCase","getFieldByName","console","log","wrap","closest","prepend","addClass","bridgeSearch","Bloodhound","datumTokenizer","tokenizers","obj","whitespace","queryTokenizer","remote","url","prepare","query","settings","type","replace","encodeURIComponent","re","RegExp","reMatch","match","filter","data","dataArrayObjects","map","records","record","object","fields","grep","username","typeahead","hint","highlight","minLength","limit","display","source","templates","empty","join","suggestion","suggestionHtml","siblings","removeAttr","bind","ev","selectedCallback","keydown","event","keyCode","preventDefault","jQuery","defaultConfiguration","faClass","placeholder","translate","emptyMessage","userIdAttribute","queryField","additionalParams","bridgedResource","bridgeLocation","attrsToShow","attrToSet","fieldsToSet","config","suggestionDetails","append","key","field","select","change","DataViewer","on","stopPropagation","defaultsBridgeDataTable","resultsContainer","paging","info","searching","responsive","details","defaultsBridgeList","initializeResultsContainer","configObj","forms","self","resultsContainerId","length","destination","setParentChildForms","evaluteObjType","currentFormId","currentForm","as","Kinetic","parent","Subform","executeSearch","before","parameters","resource","val","load","attributes","values","success","response","successEmpty","renderer","complete","error","e","alert","renderFieldValues","options","processSingleResult","removeOnClick","fieldValueObj","push","renderResults","setFieldsfromResults","configData","results","k_data","v_data","fldArr","Array","isArray","k_fld","v_fld","k_form","v_form","html","callback","ucFirst","str","substr","toUpperCase","Renderers","DataTables","columns","attribute","attributeObject","unshift","title","defaultContent","class","orderable","tableContainer","fn","DataTable","isDataTable","destroy","clickCallback","tableObj","dtConfig","off","hasClass","any","row","UnorderedList","remove","$resultsList","odd_or_even","$singleResult","$title","contentValue","$value","render","from","to","locale","d","window","format","array","text","validateNotificationOptions","opts","fnName","isarray","Element","Error","anchor","warn","processNotificationExits","close","prev","previousElementSibling","matches","ReactDOM","unmountComponentAtNode","exit","querySelectorAll","forEach","toggle","allowMultiple","helpers","Typeahead","Widgets","Signature","PDF","Markdown","browserCheck","addToast","addToastAlert","openConfirm","openLoader","closeLoader","openModalForm","closeModalForm","color","message","style","closable","div","document","createElement","classList","add","parentElement","insertBefore","renderIntoDom","domWrapper","handleClose","calendar","calendarSlug","size","timezone","timezoneDisplay","maxEventLimit","calendarConfigForm","confirm","acceptButtonText","rejectButtonText","disable","onClose","notification","disabled","schedulerWidget","props","fieldMap","showSchedulerSelector","schedulerId","showTypeSelector","performSubmit","Object","keys","validate","appointmentRequestId","submission","id","rescheduleDataMap","eventUpdated","scheduledEventId","eventDate","eventTime","duration","eventDeleted","peopleSelect","container","multiple","onChange","users","valueMapper","user","target","undefined","jquery","ajaxSetup","xhrFields","withCredentials","underscore","require"],"mappings":"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","file":"static/js/137.c8226907.chunk.js","sourcesContent":["/* eslint-disable */\n/**\n * KD Typeahead\n * Version 1.0.1 (2017-04-21)\n *\n * Prerequisates to using this script are\n * jQuery / underscore / moment\n */\n\n/**\n * TO IMPLEMENT:\n * 1. Configure the required attributes on any input element within any Kinetic Form\n * 2. Configure a bridge resource\n * 3. Create an on load event to call the typeAheadSearch() function OR call the typeAheadSearch() function from within the bundle.config's ready callback in your bundle\n * 4. Add this code to custom head content, or include it within your form's jsp\n * 5. Add the corresponding css (kd-typeahead.css) to custom head content, or include it within your form's jsp\n */\n\n/**\n * DESCRIPTION\n * kd-typeahead is meant for making it easy to creat typeahead searches in Kinetic Forms\n *\n * The typeahead functionality is implemented on any input element with an attribute called \"uses-typeahead\". Additional input attributes can be specified to\n * allow form builders to manipulate the typeahead behavior.\n *\n * There is a default configuration object that is used for each typeahead search. It can be overridden by a custom configuration object added to the bundle\n * or to the forms custom head content. Additional attributes can be added to the input element that will override the custom or default configuration object.\n */\n\n/*------------------------------------------------------------\n * TYPEAHEAD SEARCH INPUT ATTRIBTUES:\n * uses-typeahead               *REQUIRED      (Provide a value if this input uses typeahead ex. 'yes')\n * typeahead-bridged-resource   *REQUIRED      (Name of Bridged Resource to Use - must match a valid bridge resource on the current or shared-resource form)\n * typeahead-attributes-to-show *REQUIRED      (Comma separated List of Bridge Attributes to Show in Typeahead Search) (e.g. Login Id,Name)\n * typeahead-attribute-to-set   *REQUIRED      (Name of Bridge Attribute to Set in Typeahead Search Field) (e.g. Name)\n * typeahead-fields-to-set      *OPTIONAL      (Comma separated Field on Form to Bridge Attribute) (e.g. Login Id Field=Login Id,Name Field=Name)\n * typeahead-bridge-location    *OPTIONAL      (If the search uses a shared-resource form specify it's slug - Defaults to current form)\n * typeahead-query-field        *OPTIONAL      (Name field the Bridged Resource is expecting to be passed as a parameter - Defaults to the typeahead search field)\n * typeahead-additional-params  *OPTIONAL      (Comma separated List of additional values to be provided to the bridge.\n *                                              The values should be prefixed with STRING:: or FIELD:: depending on if you are passing a\n *                                              hard coded string, or want the system to get a Field's Value)  (e.g Bridge Param 1=STRING::XYZ,Bridge Param 2=FIELD::FieldName )\n * typeahead-min-length         *OPTIONAL      (Minium Length to begin search)\n * typeahead-fa-class           *OPTIONAL      (Font awesom icon to append to typeahead search and results)\n * typeahead-placeholder        *OPTIONAL      (Placeholder text to put into the search field)\n * typeahead-empy-message       *OPTIONAL      (Message to display if no results are found)\n * typeahead-user-id-attribute  *OPTIONAL      (If filtering results to not include logged in user (for person searching) bridge attribute for the user's username)\n */\n\n(function($, _, moment) {\n  // On Load Event that Searches the current form for any \"typeahead\" input attributes\n  typeAheadSearch = function(form) {\n    $(form.element())\n      .find('input[uses-typeahead]:not(.typeahead)')\n      .each(function() {\n        var typeaheadForm = form;\n        // Setup Config Variables for Typeahead\n        var input = $(this);\n        var typeaheadConfig = $.extend(\n          {},\n          typeof typeaheadConfigurations['defaultConfiguration'] === 'function'\n            ? typeaheadConfigurations['defaultConfiguration']()\n            : typeaheadConfigurations['defaultConfiguration'],\n        );\n        //_.extend(typeaheadConfig, typeaheadConfigurations['defaultConfiguration'])\n        typeaheadConfig['typeaheadForm'] = typeaheadForm;\n\n        // Override the specified config object if any extra typeahead attributes were set\n        if (!_.isEmpty($(input).attr('typeahead-query-field')))\n          typeaheadConfig['queryField'] = $(input).attr(\n            'typeahead-query-field',\n          );\n        if (!_.isEmpty($(input).attr('typeahead-min-length')))\n          typeaheadConfig['minLength'] = parseInt(\n            $(input).attr('typeahead-min-length'),\n          );\n        if (!_.isEmpty($(input).attr('typeahead-fa-class')))\n          typeaheadConfig['faClass'] = $(input).attr('typeahead-fa-class');\n        if (!_.isEmpty($(input).attr('typeahead-placeholder')))\n          typeaheadConfig['placeholder'] = $(input).attr(\n            'typeahead-placeholder',\n          );\n        if (!_.isEmpty($(input).attr('typeahead-empty-message')))\n          typeaheadConfig['emptyMessage'] = $(input).attr(\n            'typeahead-empty-message',\n          );\n        if (!_.isEmpty($(input).attr('typeahead-user-id-attribute')))\n          typeaheadConfig['userIdAttribute'] = $(input).attr(\n            'typeahead-user-id-attribute',\n          );\n        if (!_.isEmpty($(input).attr('typeahead-bridged-resource')))\n          typeaheadConfig['bridgedResource'] = $(input).attr(\n            'typeahead-bridged-resource',\n          );\n        if (!_.isEmpty($(input).attr('typeahead-bridge-location')))\n          typeaheadConfig['bridgeLocation'] = $(input).attr(\n            'typeahead-bridge-location',\n          );\n        if (!_.isEmpty($(input).attr('typeahead-attributes-to-show')))\n          typeaheadConfig['attrsToShow'] = $(input)\n            .attr('typeahead-attributes-to-show')\n            .split(',');\n        if (!_.isEmpty($(input).attr('typeahead-attribute-to-set')))\n          typeaheadConfig['attrToSet'] = $(input).attr(\n            'typeahead-attribute-to-set',\n          );\n\n        if (!_.isEmpty($(input).attr('typeahead-query-field'))) {\n          typeaheadConfig['queryField'] = $(input).attr(\n            'typeahead-query-field',\n          );\n        } else if (!_.isEmpty(typeaheadConfig['queryField'])) {\n          typeaheadConfig['queryField'] = typeaheadConfig['queryField'];\n        } else {\n          typeaheadConfig['queryField'] = $(input).attr('name');\n        }\n\n        // Check to see if the fields-to-set attribute was provided and should override the config object provided\n        if (!_.isEmpty($(input).attr('typeahead-fields-to-set'))) {\n          typeaheadConfig['fieldsToSet'] = {};\n          $.each(\n            $(input)\n              .attr('typeahead-fields-to-set')\n              .split(','),\n            function(i, v) {\n              var fname = v.split('=')[0];\n              var fbridgedValue = v.split('=')[1];\n              typeaheadConfig['fieldsToSet'][fname] = fbridgedValue;\n            },\n          );\n        }\n\n        // Check to see if any additional parameters were specified to be passed to the bridge search\n        if (!_.isEmpty($(input).attr('typeahead-additional-params'))) {\n          typeaheadConfig['additionalParams'] = {};\n          $.each(\n            $(input)\n              .attr('typeahead-additional-params')\n              .split(','),\n            function(i, v) {\n              var fname = v.split('=')[0];\n              var fbridgedValue = v.split('=')[1];\n              typeaheadConfig['additionalParams'][fname] = fbridgedValue;\n            },\n          );\n        }\n\n        // Determine and build bridge url to use\n        if (!_.isEmpty(typeaheadConfig['bridgeLocation'])) {\n          typeaheadConfig['bridgeUrl'] =\n            bundle.kappLocation(K('kapp').slug()) +\n            '/' +\n            typeaheadConfig['bridgeLocation'] +\n            '/bridgedResources/' +\n            typeaheadConfig['bridgedResource'] +\n            '?values[' +\n            typeaheadConfig['queryField'] +\n            ']=%QUERY';\n        } else {\n          typeaheadConfig['bridgeUrl'] =\n            bundle.kappLocation(K('kapp').slug()) +\n            '/' +\n            typeaheadForm.slug() +\n            '/bridgedResources/' +\n            typeaheadConfig['bridgedResource'] +\n            '?values[' +\n            typeaheadConfig['queryField'] +\n            ']=%QUERY';\n        }\n\n        // If additional Parameters were passed, append them to the bridge URL\n        if (!_.isEmpty(typeaheadConfig['additionalParams'])) {\n          $.each(typeaheadConfig['additionalParams'], function(name, value) {\n            var addtlParam = '';\n            var valToSet = value.split('::')[1];\n            if (value.split('::')[0].toLowerCase() === 'string') {\n              addtlParam = '&values[' + name + ']=' + valToSet;\n            } else if (value.split('::')[0].toLowerCase() === 'field') {\n              var field = typeaheadConfig['typeaheadForm'].getFieldByName(\n                valToSet,\n              );\n              if (field != null) {\n                addtlParam =\n                  '&values[' + name + ']=' + 'field[' + valToSet + ']';\n              } else {\n                console.log(\n                  'KD Typeahead Error! When adding additional bridge parameters (typeahead-additional-params), could not find field with the name: ' +\n                    valToSet,\n                );\n              }\n            }\n            typeaheadConfig['bridgeUrl'] += addtlParam;\n          });\n        }\n\n        // Stop processing if bridgedresource is not defined or attribute to set as value is not defined\n        if (_.isEmpty(typeaheadConfig['bridgedResource'])) {\n          console.log(\n            'KD Typeahead Error! Missing bridged resource configuration (typeahead-bridged-resource).',\n          );\n          return false;\n        } else if (_.isEmpty(typeaheadConfig['attrToSet'])) {\n          console.log(\n            'KD Typeahead Error! Missing attribute to set configuration (typeahead-attribute-to-set).',\n          );\n          return false;\n        }\n\n        // Manipulate DOM to prepare for Typeahead Searching\n        $(input).wrap($('<div class=\"input-group\"/>'));\n        $(input)\n          .closest('.input-group')\n          .prepend(\n            $(\n              '<span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa ' +\n                typeaheadConfig['faClass'] +\n                '\" aria-hidden=\"true\"></i></span>',\n            ),\n          );\n        $(input).attr('placeholder', typeaheadConfig['placeholder']);\n        $(input)\n          .attr('data-provide', 'typeahead')\n          .addClass('typeahead');\n\n        // BLOODHOUND Search\n        var bridgeSearch = new Bloodhound({\n          datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),\n          queryTokenizer: Bloodhound.tokenizers.whitespace,\n          remote: {\n            url: typeaheadConfig['bridgeUrl'],\n            prepare: function(query, settings) {\n              settings.type = 'POST';\n              // Replace %query string with search value\n              settings.url = settings.url.replace(\n                '%QUERY',\n                encodeURIComponent(query),\n              );\n              // Build regexp for finding additional params that need to be replaced\n              var re = RegExp('(&values\\\\[.+?\\\\]=)field\\\\[(.+?)\\\\]');\n              var reMatch = settings.url.match(re);\n              // While additional params need to be replaced\n              while (reMatch) {\n                // Replace the param with the value from the appropriate field\n                settings.url = settings.url.replace(\n                  re,\n                  reMatch[1] +\n                    encodeURIComponent(\n                      typeaheadConfig['typeaheadForm']\n                        .getFieldByName(reMatch[2])\n                        .value(),\n                    ),\n                );\n                reMatch = settings.url.match(re);\n              }\n              return settings;\n            },\n            filter: function(data) {\n              var dataArrayObjects = _.map(data.records.records, function(\n                record,\n              ) {\n                return _.object(data.records.fields, record);\n              });\n              if (_.isEmpty(typeaheadConfig['userIdAttribute'])) {\n                return dataArrayObjects;\n              } else {\n                return $.grep(dataArrayObjects, function(data) {\n                  return (\n                    data[typeaheadConfig['userIdAttribute']] !==\n                    K('identity').username\n                  );\n                });\n              }\n            },\n          },\n        }); // End Bloodhound Search\n\n        // Initialize typeahead search\n        $(input).typeahead(\n          {\n            hint: true,\n            highlight: true,\n            minLength: typeaheadConfig['minLength'],\n          },\n          {\n            name: 'typeahead-search',\n            limit: 100,\n            display: typeaheadConfig['attrToSet'],\n            source: bridgeSearch,\n            templates: {\n              empty: [\n                '<div class=\"tt-empty-message text-center\">',\n                typeaheadConfig['emptyMessage'],\n                '<br>',\n                '</div>',\n              ].join('\\n'),\n              suggestion: function(data) {\n                suggestion = typeaheadConfig.suggestionHtml(\n                  data,\n                  typeaheadConfig,\n                );\n                return suggestion;\n              },\n            },\n          },\n        );\n        $(input)\n          .siblings('.tt-hint')\n          .removeAttr('data-element-type');\n\n        // Typeahead Change and Select Events\n        $(input).bind('typeahead:select', function(ev, suggestion) {\n          // Render the Callback Sepecified in the Configuration\n          typeaheadConfig.selectedCallback(suggestion, typeaheadConfig);\n        });\n        $(input).bind('typeahead:change', function(ev) {\n          // Change Event on Typeahead goes here\n        });\n        // Prevent Submitting of form when hitting enter\n        $(input).keydown(function(event) {\n          if (event.keyCode == 13) {\n            event.preventDefault();\n            return false;\n          }\n        });\n      });\n  }; // End Typeahead search function\n})(jQuery, _, moment);\n\n// CONFIGURATION Object\ntypeaheadConfigurations = {\n  defaultConfiguration: function() {\n    return {\n      faClass: 'fa-search', // Font awesom icon to append to typeahead search and results\n      placeholder: K.translate(\n        'shared',\n        'Start typing to begin your search...',\n      ), // Placholder text to put into the search field\n      emptyMessage: K.translate('shared', 'No results found'), // Message to display if no results are found\n      userIdAttribute: null, // If filtering results to not include logged in user (for person searching) bridge attribute for the user's Id\n      queryField: null, // Name field the Bridged Resource is expecting to be passed as a parameter - Defaults to the typeahead search field\n      additionalParams: null, // JS Object with name value pairs of additinal parameters to be provided to the bridge\n      // The values should be prefixed with STRING:: or FIELD:: depending on if you are passing a\n      // hard coded string, or want the system to get a Field's Value)  (e.g {\"Bridge Param 1\":\"STRING::XYZ\",\"Bridge Param 2\":\"FIELD::FieldName\"} )\n      minLength: 3, // Minium Length to begin search\n      bridgedResource: null, // Name of Bridged Resource to Use - must match a valid bridge resource on the current or shared-resource form\n      bridgeLocation: null, // If the search uses a shared-resource form specify it's slug - Defaults to current form\n      attrsToShow: null, // Comma separated List of Bridge Attributes to Show in Typeahead Search dropdown. (e.g. Login Id,Name)\n      attrToSet: null, // Name of Bridge Attribute to Set in Typeahead Search Field\n      fieldsToSet: null, // JS Object with name value pairs of Fields on Form to Bridge Attribute (e.g. {\"Login Id Field\":\"Login Id\",\"Name Field\"=\"Name\"})\n      suggestionHtml: function(data, config) {\n        // Data is the Data Records Returned from the Bridge Call, Config is the typeaheadConfiguration Object\n        var suggestionDetails = $('<div class=\"tt-details\"/>');\n        $.each(config['attrsToShow'], function(i, attr) {\n          $(suggestionDetails).append(\n            '<div class=\"tt-attribute col-sm-6\">' + data[attr] + '</div>',\n          );\n        });\n        var suggestion = $('<div class=\"tt-suggestion\"/>').append(\n          $(suggestionDetails),\n        );\n        return suggestion;\n      },\n      selectedCallback: function(data, config) {\n        // Data is the row that was selected, all attributes returned from the bridge are available\n        // Loop over the Fields to Set and Set them\n        $.each(config['fieldsToSet'], function(key, value) {\n          var field = config['typeaheadForm'].select('field[' + key + ']');\n          if (field != null) {\n            field.value(data[value]);\n            // Fire change event on field that was set\n            $(field.element()).change();\n          } else {\n            console.log(\n              'KD Typeahead Error! When setting fields (typeahead-fields-to-set), could not find field with the name: ' +\n                key,\n            );\n          }\n        });\n      },\n    };\n  },\n};\n\n/**\n * Change Log\n *\n * v1.0.1 2017-04-21\n *  - Added null checks when working with fields.\n * v1.0 2017-04-20\n *  - Added version. Cleaned up code a bit.\n *\n */\n","/* eslint-disable */\n/**TODO\n\n**/\n/**\nData Viewer CE\n2017-5-8: Included use of before and complete callbacks in renderFieldValues().\n**/\n(function ($) {\n  // create the dataViewer global object\n  DataViewer = typeof DataViewer == 'undefined' ? {} : DataViewer;\n\n  /**\n   * Code in kd_client.js is preventing the backspace from working on $('.dataTables_filter input'). stopPropigation allows backspace to work.\n   */\n  $('body').on('keydown', '.dataTables_filter input', function (event) {\n    event.stopPropagation();\n  });\n\n  /**\n   * Define default properties for the Search configurations\n   * Reduces need to include all properties in a search configuration.\n   * Each Search config my overide these values by including a value of its own.\n   * execute: {Function} Function which will execute the search\n   * Other properties are used by Datatables.net or its Responsive Plugin.\n   */\n  /* Define default properties for defaultsBridgeDataTable object. */\n  var defaultsBridgeDataTable = {\n    resultsContainer: '<table cellspacing=\"0\", border=\"0\", class=\"display\">',\n    // Properties specific to DataTables\n    paging: true,\n    info: true,\n    searching: true,\n    responsive: {\n      details: {\n        type: 'column',\n      },\n    },\n  };\n\n  /* Define default properties for defaultsBridgeList object. */\n  var defaultsBridgeList = {\n    resultsContainer: '<div>',\n  };\n\n  /**\n   * Executes the search for the configured search object.\n   * @param {Obj} destination\n   * @param {Obj} Search configuration object\n   */\n  DataViewer.executeSearch = function (destination, configObj) {\n    //Determine current and Parent form\n    setParentChildForms(destination, configObj);\n    if (configObj.before) {\n      configObj.before(configObj);\n    }\n    //Retrieve and set the Bridge parameter values using JQuery\n    var parameters = {};\n    if (configObj.resource.parameters) {\n      $.each(configObj.resource.parameters, function (i, v) {\n        if (typeof v == 'function') {\n          parameters[i] = v();\n        } else if (typeof v == 'string') {\n          parameters[i] = $(configObj.resource.parameters[i]).val();\n        }\n      });\n    }\n    try {\n      configObj.forms\n        .self('bridgedResource[' + configObj.resource.name + ']')\n        .load({\n          attributes: configObj.resource.attributes,\n          values: parameters,\n          success: function (response) {\n            // If Bridge is a \"Single\" convert it to array to match format of \"multiple\"\n            if (\n              configObj.forms.self(\n                'bridgedResource[' + configObj.resource.name + ']',\n              ).type == 'Single'\n            ) {\n              configObj.response = [response];\n            } else {\n              configObj.response = response;\n            }\n            // If any results or successEmpty is not defined\n            if ($(configObj.response).length > 0 || !configObj.successEmpty) {\n              // Execute success callback if defined\n              if (configObj.success) {\n                configObj.success(configObj);\n              }\n              // If configured Render Results\n              if (configObj.renderer && configObj.renderer.type) {\n                configObj = configObj.renderer.type(destination, configObj);\n              }\n            } else {\n              // No records returned\n              // Execute successEmpty callback if defined\n              if (configObj.successEmpty) {\n                configObj.successEmpty(configObj);\n                configObj = configObj.renderer.type(destination, configObj);\n              }\n            }\n            // Execute complete callback if defined\n            if (configObj.complete) {\n              configObj.complete(configObj);\n            }\n          },\n          error: function (response) {\n            // Execute error callback if defined\n            if (configObj.error) {\n              configObj.error(configObj);\n            }\n            // Execute complete callback if defined\n            if (configObj.complete) {\n              configObj.complete(configObj);\n            }\n          },\n        });\n    } catch (e) {\n      alert(\n        'There was an error loading the Bridge Resource \"' +\n          configObj.resource.name +\n          '\"',\n      );\n    }\n  };\n\n  /**\n   * Builds a response obj from Field values on the form and render the results.\n   * In the \"data\" array of the configObj the \"setField\" property is used to map the source field on the Form\n   *  to the table or list.\n   * @param {Obj} destination\n   * @param {Obj} Search configuration object\n   */\n  DataViewer.renderFieldValues = function (destination, configObj) {\n    // Initialize the forms obj\n    setParentChildForms(destination, configObj);\n    // Initialize the response if not defined\n    configObj.response =\n      typeof configObj.response == 'undefined' ? [] : configObj.response;\n    // The processSingleResult property should not be set to true when using renderFieldValues.\n    configObj.renderer.options.processSingleResult = false;\n    // The removeOnClick property should not be set to true when using renderFieldValues.\n    configObj.removeOnClick = false;\n    if (configObj.before) {\n      configObj.before(configObj);\n    }\n    var fieldValueObj = {};\n    // Get Field Values and place into an object\n    $.each(configObj.data, function (i, v) {\n      if (v['setField'] != '' && typeof v['setField'] != 'undefined') {\n        // Set field string (e.g.: \"field[First Name]\")\n        var field = 'field[' + v['setField'] + ']';\n        // Check if field exist on self then parent. If neither set to empty.\n        if (configObj.forms.self(field) != null) {\n          var value = configObj.forms.self(field).value();\n        } else if (configObj.forms.parent(field) != null) {\n          var value = configObj.forms.parent(field).value();\n        } else {\n          var value = '';\n        }\n        // Set value into the feidlValueObj\n        fieldValueObj[v['name']] = value;\n      }\n    });\n    // Add object to the response Array\n    configObj.response.push(fieldValueObj);\n    // Render Results\n    configObj = configObj.renderer.type(destination, configObj);\n    if (configObj.complete) {\n      configObj.complete(configObj);\n    }\n  };\n\n  /**\n   * Renders the results fo a Search configuration object.\n   * @param {Obj} destination\n   * @param {Obj} Search configuration object\n   */\n  DataViewer.renderResults = function (destination, configObj) {\n    // Initialize the forms obj\n    setParentChildForms(destination, configObj);\n    // The processSingleResult property should not be set to true when using renderFieldValues.\n    configObj.renderer.options.processSingleResult = false;\n    // Initialize the response if not defined\n    configObj.response =\n      typeof configObj.response == 'undefined' ? [] : configObj.response;\n    // If any results or successEmpty is not defined\n    if ($(configObj.response).length > 0 || !configObj.successEmpty) {\n      // Execute success callback if defined\n      if (configObj.success) {\n        configObj.success(configObj);\n      }\n      // If configured Render Results\n      if (configObj.renderer && configObj.renderer.type) {\n        configObj = configObj.renderer.type(destination, configObj);\n      }\n    } else {\n      // No records returned\n      // Execute successEmpty callback if defined\n      if (configObj.successEmpty) {\n        configObj.successEmpty(configObj);\n      }\n    }\n    // Execute complete callback if defined\n    if (configObj.complete) {\n      configObj.complete(configObj);\n    }\n  };\n\n  /**\n   * Set Values from selected row\n   * @params {Object} data config object\n   * @params {Object} data returned from selection.\n   */\n  DataViewer.setFieldsfromResults = function (configData, results, configObj) {\n    //rowCallback\n    var self = this;\n    self.configObj = configObj;\n    //Iterate through the data object defined in the configuration\n    $.each(configData, function (k_data, v_data) {\n      // If setField property is set\n      if (\n        v_data['setField'] != '' &&\n        typeof v_data['setField'] != 'undefined'\n      ) {\n        // If setField is not an array create one\n        fldArr = !Array.isArray(v_data['setField'])\n          ? new Array(v_data['setField'])\n          : v_data['setField'];\n        // Iterate through array of setField values\n        $.each(fldArr, function (k_fld, v_fld) {\n          // Set field string (e.g.: \"field[First Name]\")\n          var field = 'field[' + v_fld + ']';\n          var v_fld = v_fld;\n          //Iterate through each of the defined forms (ie: self and parent)\n          $.each(self.configObj.forms, function (k_form, v_form) {\n            // Set field value if it exists for self and parent\n            if (v_form('field[' + v_fld + ']') !== null) {\n              v_form('field[' + v_fld + ']').value(results[v_data['name']]);\n            } else {\n              // v_fld is not a field try setting value using jQuery\n              evaluteObjType(v_fld).html(results[v_data['name']]);\n            }\n          });\n        });\n      }\n      // If callback property exists\n      if (v_data.callback) {\n        v_data.callback(results[v_data['name']], results); //cellvalue, row values\n      }\n    });\n  };\n\n  /****************************************************************************\n      PRIVATE HELPERS / SHARED FUNCTIONS\n  ****************************************************************************/\n\n  /**\n   * Returns object\n   * @param {Object} table\n   */\n  evaluteObjType = function (obj) {\n    // Append to DOM\n    if (obj instanceof $) {\n      // if jQuery Obj\n      obj = obj;\n    } else if (typeof obj == 'string') {\n      // if string\n      obj = $(obj);\n    } else if (typeof obj == 'function') {\n      // if function\n      obj = obj();\n    }\n    return obj;\n  };\n\n  /**\n   * Returns Search Object\n   * Creates resultsContainer and adds it to DOM based on Search Config\n   * @param {Object} Search Object\n   */\n  function initializeResultsContainer(configObj) {\n    if (\n      $(configObj.forms.self('form').element()).find(\n        '#' + configObj.resultsContainerId,\n      ).length == 0\n    ) {\n      // Create resultsContainer\n      if (typeof configObj.resultsContainer == 'string') {\n        // if string\n        configObj.resultsContainer = $(configObj.resultsContainer).attr(\n          'id',\n          configObj.resultsContainerId,\n        );\n      } else if (typeof configObj.resultsContainer == 'function') {\n        // if function\n        configObj.resultsContainer = configObj\n          .resultsContainer()\n          .attr('id', configObj.resultsContainerId);\n      }\n      // Append to DOM\n      if (configObj.destination instanceof $) {\n        // if jQuery configObj\n        configObj.destination.append(configObj.resultsContainer);\n      } else if (typeof configObj.destination == 'string') {\n        // if string\n        configObj.destination = $(configObj.destination).append(\n          configObj.resultsContainer,\n        );\n      } else if (typeof configObj.destination == 'function') {\n        // if function\n        configObj.destination = configObj\n          .destination()\n          .append(configObj.resultsContainer);\n      }\n      return configObj;\n    }\n    return configObj;\n  }\n\n  /**\n   * Convert the \"data\" property into \"columns\", necessary for DataTables.\n   * @param {Object} Search Object to convert\n   */\n  function convertDataToColumns(obj) {\n    obj.columns = [];\n    $.each(obj.data, function (attribute, attributeObject) {\n      attributeObject['data'] = attributeObject.name;\n      obj.columns.push(attributeObject);\n    });\n  }\n\n  /**\n   * Set the Parent form and Current form for when DataViewer is used as a SubForm\n   * @param {Object} Config Obj\n   */\n  function setParentChildForms(destination, configObj) {\n    configObj.destination = evaluteObjType(destination);\n    configObj.forms = {};\n    var currentFormId = $(configObj.destination)\n      .closest('form[data-form]')\n      .attr('id');\n    var currentForm = K.as(Kinetic.forms[currentFormId]);\n    configObj.forms.self = currentForm;\n    configObj.forms.parent = K;\n    // Create an alias for self which is easier syntax to reference in the callbacks\n    Subform = configObj.forms.self;\n  }\n\n  /****************************************************************************\n                                PUBlIC FUNCTIONS\n    ****************************************************************************/\n\n  /**\n   * Returns string with uppercase first letter\n   * @param {String} Value to be give uppercase letter\n   */\n  DataViewer.ucFirst = function (str) {\n    var firstLetter = str.substr(0, 1);\n    return firstLetter.toUpperCase() + str.substr(1);\n  };\n\n  /****************************************************************************\n                                RENDERERS\n    ****************************************************************************/\n  DataViewer.Renderers = {\n    /**\n     * Create a TableTable using a Search Object\n     * @param {Object} Search Object used to create the DataTable\n     */\n    DataTables: function (destination, configObj) {\n      // Entend defaults into the configuration\n      configObj = $.extend({}, defaultsBridgeDataTable, configObj);\n      // Merge Render options into Config Obj\n      configObj = $.extend(true, {}, configObj, configObj.renderer.options);\n      // Create a table element for Datatables and add to DOM\n      configObj = initializeResultsContainer(configObj);\n      // Set columns, need by DataTables\n      convertDataToColumns(configObj);\n      // Ensure the response is an Array\n      /*if (typeof configObj.response === 'undefined') {\n        alert('The response Obj is undefined.  The table cannot be populated.');\n      } else */ if (\n        typeof configObj.response !== 'undefined' &&\n        !Array.isArray(configObj.response)\n      ) {\n        alert(\n          'The response Obj must be an Array.  The table cannot be populated.',\n        );\n      }\n\n      // Set data, needed by DataTables\n      configObj.data = configObj.response;\n      // Append Column to beginning of table contain row expansion for responsive Plugin\n      if (configObj.responsive) {\n        configObj.columns.unshift({\n          title: '&nbsp',\n          defaultContent: '',\n          class: 'control',\n          orderable: false,\n        });\n      }\n      // For when DataViewer is used in a Subform. \"$(configObj.forms.self('form').element()).find(\"#\"+configObj.resultsContainerId)\" finds only children of the current form.\n      var tableContainer = $(configObj.forms.self('form').element()).find(\n        '#' + configObj.resultsContainerId,\n      );\n      if (\n        typeof configObj.processSingleResult != 'undefined' &&\n        configObj.processSingleResult &&\n        $(configObj.data).length == 1\n      ) {\n        // If it exists destroy DataTable and remove from view.\n        if ($.fn.DataTable.isDataTable(tableContainer)) {\n          tableContainer.DataTable().destroy([true]);\n        }\n        //Set Results to Fields\n        DataViewer.setFieldsfromResults(\n          configObj.columns,\n          configObj.data[0],\n          configObj,\n        );\n        //Execute ClickCallback\n        try {\n          if (configObj.clickCallback) {\n            configObj.clickCallback(null, configObj.data[0]);\n          }\n        } catch (e) {\n          alert('Error in clickCallback:\\n' + e);\n        }\n        // No result set has been created due to a single result and \"processSingleResult\" == true.  Create object to prevent errors and display message in the configObj\n        configObj.tableObj = $(\n          'A single result was processed, no result set was created',\n        );\n      } else {\n        // If it exists destroy DataTable and empty it.\n        if ($.fn.DataTable.isDataTable(tableContainer)) {\n          tableContainer.DataTable().destroy();\n          tableContainer.empty();\n        }\n        var dtConfig = {};\n        dtConfig.data = configObj.data;\n        dtConfig.columns = configObj.columns;\n        dtConfig = $.extend(true, {}, dtConfig, configObj.renderer.options);\n        configObj.tableObj = tableContainer.DataTable(dtConfig);\n        // Bind Click Event based on where the select attribute extists ie:<tr> or <td>\n        tableContainer.off().on('click', 'td', function (event) {\n          // Ensure user has not clicked on an element with control class (Used by the responsive plugin to expand info and allow checkbox and button elements to be clicked)\n          if (!$(this).hasClass('control') && configObj.tableObj.data().any()) {\n            DataViewer.setFieldsfromResults(\n              configObj.columns,\n              configObj.tableObj.row($(this).closest('tr')).data(),\n              configObj,\n            );\n            try {\n              if (configObj.clickCallback) {\n                configObj.clickCallback(\n                  $(this).closest('tr'),\n                  configObj.tableObj.row($(this).closest('tr')).data(),\n                  configObj,\n                );\n              }\n            } catch (e) {\n              alert('Error in clickCallback:\\n' + e);\n            }\n            if (\n              configObj.removeOnClick ||\n              typeof configObj.removeOnClick == 'undefined'\n            ) {\n              // Destroy DataTable and empty container in case columns change.\n              configObj.tableObj.destroy();\n              tableContainer.empty();\n            }\n          }\n        });\n      }\n      return configObj;\n    },\n    UnorderedList: function (destination, configObj) {\n      // Entend defaults into the configuration\n      configObj = $.extend({}, defaultsBridgeList, configObj);\n      // Merge Render options into Config Obj\n      configObj = $.extend(true, {}, configObj, configObj.renderer.options);\n      // Ensure the response is an Array\n      if (!Array.isArray(configObj.response)) {\n        alert(\n          'The response Obj must be an Array.  The table cannot be populated.',\n        );\n      }\n      // Create a results element for Datatables and add to DOM\n      configObj = initializeResultsContainer(configObj);\n      if (\n        typeof configObj.processSingleResult != 'undefined' &&\n        configObj.processSingleResult &&\n        $(configObj.response).length == 1\n      ) {\n        //Destroy List\n        $(configObj.forms.self('form').element())\n          .find('#' + configObj.resultsContainerId)\n          .remove();\n        //Set Results to Fields\n        DataViewer.setFieldsfromResults(\n          configObj.data,\n          configObj.response[0],\n          configObj,\n        );\n        //Execute ClickCallback\n        try {\n          if (configObj.clickCallback) {\n            configObj.clickCallback(null, configObj.response[0]);\n          }\n        } catch (e) {\n          alert('Error in clickCallback:\\n' + e);\n        }\n      } else {\n        this.$resultsList = $('<ul/>').attr('id', 'resultList');\n        var self = this; // reference to this in current scope\n        //Iterate through row results to retrieve data\n        $.each(configObj.response, function (i, record) {\n          var odd_or_even = i % 2 == 0 ? 'even' : 'odd';\n          self.$singleResult = $('<li/>').attr(\n            'class',\n            'result ' + odd_or_even,\n          );\n          //Iterate through the configured columns to match with data returned from bridge\n          $.each(configObj.data, function (attribute, attributeObject) {\n            if (\n              typeof record[attributeObject.name] != 'undefined' ||\n              typeof attributeObject['defaultContent'] != 'undefined'\n            ) {\n              var title = '';\n              if (attributeObject['title']) {\n                var $title = $('<div/>')\n                  .addClass('title ' + attributeObject['class'])\n                  .html(attributeObject['title']);\n                self.$singleResult.append($title);\n              }\n              var contentValue = '';\n              if (typeof attributeObject['defaultContent'] != 'undefined') {\n                contentValue = attributeObject['defaultContent'];\n                self.$singleResult.data(\n                  attributeObject.name,\n                  attributeObject['defaultContent'],\n                );\n              } else {\n                contentValue = record[attributeObject.name];\n                self.$singleResult.data(\n                  attributeObject.name,\n                  record[attributeObject.name],\n                );\n              }\n              if (typeof attributeObject['render'] != 'undefined') {\n                contentValue = attributeObject['render'](\n                  contentValue,\n                  'display',\n                  record,\n                );\n              }\n              var $value = $('<div/>')\n                .addClass(attributeObject['class'])\n                .html(contentValue)\n                .data('name', attributeObject['name']);\n              self.$singleResult.append($value);\n            }\n          });\n          self.$resultsList.append(self.$singleResult);\n        });\n        // For when DataViewer is used in a Subform. \"$(configObj.forms.self('form').element()).find(\"#\"+configObj.resultsContainerId)\" finds only children of the current form.\n        $(configObj.forms.self('form').element())\n          .find('#' + configObj.resultsContainerId)\n          .empty()\n          .append(this.$resultsList);\n        $(configObj.forms.self('form').element())\n          .find('#' + configObj.resultsContainerId)\n          .off()\n          .on('click', 'li div', function (event) {\n            // Ensure user has not clicked on an element with control class (Used to allow checkbox and button elements to be clicked)\n            if (!$(this).hasClass('control')) {\n              DataViewer.setFieldsfromResults(\n                configObj.data,\n                $(this).parent('li').data(),\n                configObj,\n              );\n              try {\n                if (configObj.clickCallback) {\n                  configObj.clickCallback(\n                    $(this).parent('li'),\n                    $(this).parent('li').data(),\n                  );\n                }\n              } catch (e) {\n                alert('Error in clickCallback:\\n' + e);\n              }\n              if (\n                configObj.removeOnClick ||\n                typeof configObj.removeOnClick == 'undefined'\n              ) {\n                $(configObj.forms.self('form').element())\n                  .find('#' + configObj.resultsContainerId)\n                  .empty();\n              }\n            }\n          });\n      }\n      return configObj;\n    },\n  };\n\n  /****************************************************************************\n                                Render Utilities\n                            Used to render Data results\n    ****************************************************************************/\n\n  DataViewer.render = {\n    // Render using moment.js\n    moment: function (options) {\n      //Default Options\n      var options = options || {};\n      var from = options.from || '';\n      var to = options.to || 'MMMM Do YYYY, h:mm:ss a';\n      var locale = options.locale || 'en';\n\n      return function (d, type, row) {\n        var m = window.moment(d, from, locale, true);\n\n        // Order and type get a number value from Moment, everything else\n        // sees the rendered value\n        return m.format(type === 'sort' || type === 'type' ? 'x' : to);\n      };\n    },\n  };\n\n  /****************************************************************************\n                                 Utilities\n    ****************************************************************************/\n  /**\n   * Jquery plugin for Unordered Lists\n   * Creates functionality similar to DataTables plugin.\n   */\n  $.fn.UnorderedList = function () {\n    var self = this;\n    /**\n     * Returns List as JSON obj\n     */\n    var data = function () {\n      var array = [];\n      $(self)\n        .find('li')\n        .each(function (i, v) {\n          var obj = {};\n          $(v)\n            .find(\"div:not('.title')\")\n            .each(function (i, v) {\n              obj[$(v).data('name')] = $(v).text();\n            });\n          array.push(obj);\n        });\n      return array;\n    };\n    return {\n      data: data,\n    };\n  };\n})(jQuery);\n","import ReactDOM from 'react-dom';\nimport isarray from 'isarray';\n\n/**\n * Validates that the options for displaying a notification are valid.\n * @param opts  Options object\n * @return      Updated options object\n */\nexport const validateNotificationOptions = (opts, fnName) => {\n  // If element option is an array, use first value\n  if (isarray(opts.element)) {\n    opts.element = opts.element[0];\n  }\n  // Make sure element option is an actual DOM Element object\n  if (!opts.element || !(opts.element instanceof Element)) {\n    throw new Error(\n      `${fnName} failed, element is required and must be a DOM Element`,\n    );\n  }\n\n  // If anchor option is an array, use the first value\n  if (isarray(opts.anchor)) {\n    opts.anchor = opts.anchor[0];\n  }\n  // If anchor option is a string, use as argument to find closest Element\n  if (opts.anchor && typeof opts.anchor === 'string') {\n    opts.anchor = opts.element.closest(opts.anchor);\n    if (!opts.anchor) {\n      console.warn(\n        `${fnName} could not find the anchor DOM Element and is using the element instead`,\n      );\n    }\n  }\n  // If no anchor option provided or it couldn't be found, set to be the element\n  if (!opts.anchor || !(opts.anchor instanceof Element)) {\n    opts.anchor = opts.element;\n  }\n\n  return opts;\n};\n\n/**\n * Handles the exit parameter for notifications and closes any existing\n * notification at the anchor level if applicable.\n * @param opts  Options object\n * @returns     Boolean; true if only exit was required and notifications does\n *              not need to be shown, otherwise false\n */\nexport const processNotificationExits = opts => {\n  // Define function to close notifications on this anchor\n  const close = () => {\n    let prev;\n    while (\n      (prev = opts.anchor.previousElementSibling) &&\n      prev.matches('div.notification-wrapper')\n    ) {\n      ReactDOM.unmountComponentAtNode(prev);\n    }\n  };\n\n  // If exit option is set to 'all', remove all notifications in descendants\n  if (opts.exit === 'all') {\n    opts.anchor\n      .querySelectorAll('div.notification-wrapper')\n      .forEach(element => ReactDOM.unmountComponentAtNode(element));\n  }\n  // If exit option is truthy, close existing notifications and return\n  if (opts.exit) {\n    close();\n    return true;\n  }\n  // If toggle option is true and notification exists, close it and return\n  if (\n    opts.toggle &&\n    opts.anchor.previousElementSibling &&\n    opts.anchor.previousElementSibling.matches('div.notification-wrapper')\n  ) {\n    close();\n    return true;\n  }\n  // If allowMultiple option is not true, close existing notifications\n  if (!opts.allowMultiple) {\n    close();\n  }\n\n  return false;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  renderIntoDom,\n  Alert,\n  Confirm,\n  PeopleSelect,\n  SchedulerWidget,\n  Calendar,\n  CalendarForm,\n  Widgets,\n  addToast,\n  addToastAlert,\n  browserCheck,\n  openConfirm,\n  openModalForm,\n  closeModalForm,\n  openLoader,\n  closeLoader,\n} from '@kineticdata/bundle-common';\nimport {\n  validateNotificationOptions,\n  processNotificationExits,\n} from './notifications';\n\n// Ensure the bundle global object exists\nconst bundle = typeof window.bundle !== 'undefined' ? window.bundle : {};\n// Create helpers namespace\nbundle.helpers = bundle.helpers || {};\n\n// Renders a typeahead component into the form\nbundle.helpers.Typeahead = Widgets.Typeahead;\nbundle.helpers.Signature = Widgets.Signature;\nbundle.helpers.PDF = Widgets.PDF;\nbundle.helpers.Markdown = Widgets.Markdown;\nbundle.helpers.browserCheck = browserCheck;\n\n/**\n * Displays a toast message (bottom of the screen - disappears on its own after\n * 5 seconds). Multiple toasts can be displayed at the same time.\n *\n * Accepts either a string or options object as a parameter.\n *   If a string is passed, it defaults to a success toast.\n *   If an object is passed, the following properties can be provided:\n *     - message:   String message to display.\n *     - severity:  Bootstrap severity class (success, danger, etc)\n *     - icon:      Font Awesome icon class (without the 'fa-' part)\n */\nbundle.helpers.addToast = addToast;\n\n/**\n * Displays a toast alert message (top left corner of screen - persists until\n * closed). Only one visible at a time.\n *\n * Accepts either a string or options object as a parameter.\n *   If a string is passed, it defaults to a danger alert.\n *   If an object is passed, the following properties can be provided:\n *     - title:     String heading to display.\n *     - message:   String message to display.\n *     - severity:  Bootstrap severity class (success, danger, etc)\n *     - actions:   Array of objects defining button actions.\n *                  Each action object must have the following properties:\n *                   - label:     The label of the action button\n *                   - onClick:   The function to trigger when clicked\n */\nbundle.helpers.addToastAlert = addToastAlert;\n\n/**\n * Displays a confirmation modal. Only one visible at a time.\n *\n * Accepts an options object as a parameter.\n *   The options object can provide the following properties:\n *     - title:       String heading to display.\n *     - body:        String message to display.\n *     - actionName:  Label of the confirmation button\n *     - actionType:  Bootstrap severity class (success, danger, etc)\n *     - ok:          Function that triggers when confirmed\n *     - cancel:      Function that triggers when cancelled\n *     - confirmationText:       Optional string of text the user must exactly\n *                               type in before they can confirm\n *     - confirmationTextLabel:  String describing what type of value\n *                               'confirmationText' is (text, slug, username, etc)\n */\nbundle.helpers.openConfirm = openConfirm;\n\n/**\n * Displays a loader modal. Only one visible at a time.\n *\n * Accepts an options object as a parameter.\n *   The options object can provide the following properties:\n *     - heading:     String heading to display in place of the spinner.\n *     - title:       String title to display.\n *     - body:        String message to display.\n */\nbundle.helpers.openLoader = openLoader;\n/** Hides the loader modal if one is open. */\nbundle.helpers.closeLoader = closeLoader;\n\n/**\n * Opens a Kinetic form in a modal.\n *\n * @param options {\n *    submissionId:         string\n *        Id of the submission to render. Required if formSlug is not provided.\n *\n *    formSlug:             string\n *        Slug of form to render. Required if submissionId is not provided.\n *\n *    kappSlug:             string\n *        Slug of kapp in which the form exists. Omit if rendering a datastore\n *        form or a submission.\n *\n *    values:               object\n *        Map of values to pas to the Kinetic form.\n *\n *    title:                string\n *        TItle text to show in the modal header.\n *\n *    confirmationMessage:  string [Default: 'Your form has been submitted.']\n *        Confirmation message to show in the modal when the form is completed.\n *\n *    duration:             number\n *        Number of milliseconds until the modal will autmoatically close once\n *        the form has been completed. The modal stays open if omitted.\n */\nbundle.helpers.openModalForm = openModalForm;\n\n/**\n * Closes the modal opened by the openModalForm function.\n */\nbundle.helpers.closeModalForm = closeModalForm;\n\n/**\n * Displays an alert to the user.\n *\n * @param options {\n *    element:        DOM Element *required*\n *        Element which triggers the display of the alert.\n *\n *    anchor:         DOM Element|string [Defaults to the element option]\n *        Element or string selector of element's ancesotor. The notification\n *        will be inserted above the anchor.\n *\n *    color:          string [Default: 'danger']\n *        Defines the color of the alert as defined by Bootstrap.\n *\n *    message:        string [Default: 'Error']\n *        The message to display inside the alert.\n *\n *    style:          object [Default: {}]\n *        Object containing inline styles to be added to the notification.\n *\n *    onShow:         function(element, notification)\n *        Function that fires when the notification is shown.\n *\n *    onClose:        function(element, notification)\n *        Function that fires when the notification is closed.\n *\n *    closable:       boolean [Default: true]\n *        If true, shows close icon in top right corner.\n *\n *    exitEvents:     string (Example: 'click' or 'focus' or 'click focus')\n *        Events to be added to the element that will close the notification.\n *\n *    toggle:         boolean [Default: false]\n *        If true and if notification already exists for this anchor, it will be\n *        closed and a new one will not be opened.\n *\n *    allowMultiple:  boolean [Default: false]\n *        If true, will allow multiple notifications to be opened for the same\n *        anchor.\n *\n *    expire:         number\n *        If provided, the notification will automatically close after the\n *        given number of seconds. The closable option must be true.\n *\n *    exit:           boolean|'all'\n *        If exit evaluates to a truthy value, existing notifications will be\n *        closed instead of a new one being created. If set to 'all', all\n *        notifications that are descendants of the anchor will be closed, in\n *        addition to the anchors notifications. If set to any other truthy\n *        value, only the anchors notifications will be closed.\n * }\n */\nbundle.helpers.alert = (options = {}) => {\n  // Combine passed in options with the defaults and validate\n  const opts = validateNotificationOptions(\n    {\n      color: 'danger',\n      message: 'Error',\n      style: {},\n      closable: true,\n      ...options,\n    },\n    'bundle.helpers.alert',\n  );\n  // If method returns true, no need to create new notification\n  if (processNotificationExits(opts)) {\n    return;\n  }\n  // Create wrapper div to insert into DOM\n  const div = document.createElement('div');\n  div.classList.add('notification-wrapper');\n  // Insert the wrapper div into the DOM\n  opts.anchor.parentElement.insertBefore(div, opts.anchor);\n  // Initialize the Alert component\n  renderIntoDom(\n    <Alert\n      {...opts}\n      domWrapper={div}\n      handleClose={() => ReactDOM.unmountComponentAtNode(div)}\n    />,\n    div,\n  );\n};\n\n/**\n * Displays a calendar.\n *\n * @param options {\n *    div:              DOM Element *required*\n *        Element element the calendar is anchored to.\n *\n *    calendarSlug:     Slug of calendar *required*\n *        The slug of the calendar, must match a calendar configuration\n *        in the calendar configuration datastore.\n *\n *    size:             Width of the window the calendar is render in.\n *        *recommended* The options are medium and large.\n *\n *    timezone:         Set the calendar initial timezone.\n *\n *    timezoneDisplay:  Sets the visibility of the timezone display dropdown.\n *\n *    maxEventLimit:    Sets the number of events that will show on a given day\n *        in month view or all day events in week view.\n *\n *    title:            Add a title to the calendar.\n * }\n */\nbundle.helpers.calendar = (div, options = {}) => {\n  if (!options.calendarSlug) {\n    console.warn('The calendar requires calendarSlug');\n    return;\n  }\n\n  renderIntoDom(\n    <Calendar\n      slug={options.calendarSlug}\n      size={options.size}\n      timezone={options.timezone}\n      timezoneDisplay={options.timezoneDisplay}\n      maxEventLimit={options.maxEventLimit}\n      title={options.title}\n    />,\n    div,\n  );\n};\n\nbundle.helpers.calendarConfigForm = (div, options = {}) => {\n  renderIntoDom(<CalendarForm {...options} />, div);\n};\n\n/**\n * Displays a confirm message to the user.\n *\n * @param options {\n *    element:          DOM Element *required*\n *        Element which triggers the display of the alert.\n *\n *    anchor:           DOM Element|string [Defaults to the element option]\n *        Element or string selector of element's ancesotor. The notification\n *        will be inserted above the anchor.\n *\n *    color:            string [Default: 'danger']\n *        Defines the color of the alert as defined by Bootstrap.\n *\n *    message:          string [Default: 'Error']\n *        The message to display inside the alert.\n *\n *    acceptButtonText: string [Default: 'OK']\n *        The text shown in the accept button.\n *\n *    rejectButtonText: string [Default: 'Cancel']\n *        The text shown in the reject button.\n *\n *    style:            object [Default: {}]\n *        Object containing inline styles to be added to the notification.\n *\n *    onShow:           function(element, notification)\n *        Function that fires when the notification is shown.\n *\n *    onAccept:         function(element, notification)\n *        Function that fires when the confirm is accepted.\n *\n *    onReject:         function(element, notification)\n *        Function that fires when the confirm is rejected.\n *\n *    onClose:          function(element, notification)\n *        Function that fires when the notification is closed.\n *\n *    disable:          boolean [Default: true]\n *        If true, disables the element while the notification is open.\n *\n *    toggle:           boolean [Default: false]\n *        If true and if notification already exists for this anchor, it will be\n *        closed and a new one will not be opened.\n *\n *    allowMultiple:    boolean [Default: false]\n *        If true, will allow multiple notifications to be opened for the same\n *        anchor.\n *\n *    exit:             boolean|'all'\n *        If exit evaluates to a truthy value, existing notifications will be\n *        closed instead of a new one being created. If set to 'all', all\n *        notifications that are descendants of the anchor will be closed, in\n *        addition to the anchors notifications. If set to any other truthy\n *        value, only the anchors notifications will be closed.\n * }\n */\nbundle.helpers.confirm = (options = {}) => {\n  // Combine passed in options with the defaults and validate\n  const opts = validateNotificationOptions(\n    {\n      color: 'danger',\n      message: 'Error',\n      acceptButtonText: 'OK',\n      rejectButtonText: 'Cancel',\n      style: {},\n      disable: true,\n      ...options,\n      onClose:\n        options.disable === false\n          ? options.onClose\n          : (element, notification) => {\n              element.disabled = false;\n              if (typeof options.onClose === 'function') {\n                options.onClose(element, notification);\n              }\n            },\n    },\n    'bundle.helpers.confirm',\n  );\n  // If method returns true, no need to create new notification\n  if (processNotificationExits(opts)) {\n    return;\n  }\n  // Create wrapper div to insert into DOM\n  const div = document.createElement('div');\n  div.classList.add('notification-wrapper');\n  // Insert the wrapper div into the DOM\n  opts.anchor.parentElement.insertBefore(div, opts.anchor);\n  // Initialize the Confirm component\n  renderIntoDom(\n    <Confirm\n      {...opts}\n      domWrapper={div}\n      handleClose={() => ReactDOM.unmountComponentAtNode(div)}\n    />,\n    div,\n  );\n  // Disable element if disable option is true\n  if (opts.disable) {\n    opts.element.disabled = true;\n  }\n};\n\n/**\n * Displays the sheduler widget to allow users to shcedule a time.\n *\n * @param div       DOM element *required*\n *    The element into which the scheduler should be inserted.\n * @param props     {\n *    showSchedulerSelector   boolean [Default: false]\n *    schedulerId             string *required if showSchedulerSelector != true*\n *    showTypeSelector        boolean [Default: false]\n *    source               string *required if showTypeSelector != true*\n *    scheduledEventId        string\n *    eventUpdated            string\n *    canReschedule           boolean [Default: false]\n *    canCancel               boolean [Default: false]\n *    performSubmit           function action.continue function from submit event\n *  }\n * @param form      Kinetic form object *required*\n * @param fieldMap  Map *required*\n *    A map of scheduled event values to form fields that should be updated on\n *    event creation, update, or delete.\n *    Available values:\n *      scheduledEventId *required*\n *      eventDate\n *      eventTime\n *      duration\n */\nbundle.helpers.schedulerWidget = (div, props = {}, form, fieldMap = {}) => {\n  /*\n    TODO\n    - Make showSchedulerSelector and showTypeSelector work in widget and update\n    corresponding fields with fieldMap\n  */\n  if (\n    (!props.showSchedulerSelector && !props.schedulerId) ||\n    (!props.showTypeSelector && !props.source)\n  ) {\n    ReactDOM.unmountComponentAtNode(div);\n  } else {\n    if (typeof props.performSubmit === 'function') {\n      if (Object.keys(form.validate()).length > 0) {\n        props.performSubmit();\n        return;\n      }\n    }\n    renderIntoDom(\n      <SchedulerWidget\n        {...props}\n        appointmentRequestId={form.submission().id()}\n        rescheduleDataMap={fieldMap}\n        eventUpdated={event => {\n          if (\n            fieldMap.scheduledEventId &&\n            form.getFieldByName(fieldMap.scheduledEventId)\n          ) {\n            form.getFieldByName(fieldMap.scheduledEventId).value(event.id);\n          }\n          if (fieldMap.eventDate && form.getFieldByName(fieldMap.eventDate)) {\n            form.getFieldByName(fieldMap.eventDate).value(event.values['Date']);\n          }\n          if (fieldMap.eventTime && form.getFieldByName(fieldMap.eventTime)) {\n            form.getFieldByName(fieldMap.eventTime).value(event.values['Time']);\n          }\n          if (fieldMap.duration && form.getFieldByName(fieldMap.duration)) {\n            form\n              .getFieldByName(fieldMap.duration)\n              .value(event.values['Duration']);\n          }\n        }}\n        eventDeleted={() => {\n          if (\n            fieldMap.scheduledEventId &&\n            form.getFieldByName(fieldMap.scheduledEventId)\n          ) {\n            form.getFieldByName(fieldMap.scheduledEventId).value('');\n          }\n          if (fieldMap.eventDate && form.getFieldByName(fieldMap.eventDate)) {\n            form.getFieldByName(fieldMap.eventDate).value('');\n          }\n          if (fieldMap.eventTime && form.getFieldByName(fieldMap.eventTime)) {\n            form.getFieldByName(fieldMap.eventTime).value('');\n          }\n          if (fieldMap.duration && form.getFieldByName(fieldMap.duration)) {\n            form.getFieldByName(fieldMap.duration).value('');\n          }\n        }}\n      />,\n      div,\n    );\n  }\n};\n\n/**\n * Renders a PeopleSelect into the given container.\n *\n * @param options {\n *    container:        DOM Element *required*\n *        Element into which the PeopleSelect should be rendered.\n *\n *    multiple:         boolean [Default: true]\n *        If true, PeopleSelect will allow multiple users to be sleected.\n *\n *    onChange:         Function *required*\n *        Function that is called when the value of the PeopleSelect changes.\n *        Passed a user object if multiple=false.\n *        Passed a list of user objects if multiple=true.\n * }\n */\nbundle.helpers.peopleSelect = ({\n  container,\n  multiple = false,\n  onChange,\n  ...props\n} = {}) => {\n  if (container) {\n    renderIntoDom(\n      <PeopleSelect\n        multiple={multiple}\n        users={true}\n        valueMapper={value => value.user}\n        onChange={\n          typeof onChange === 'function'\n            ? e => onChange(multiple ? e.target.value : e.target.value[0])\n            : undefined\n        }\n        props={props || {}}\n      />,\n      container,\n    );\n  } else {\n    console.warn(\n      'bundle.helpers.peopleSelect must pass container as an option',\n    );\n  }\n};\n/**\n * Removes the people select from a given container.\n *\n * @param container:        DOM Element *required*\n *    Element from which the PeopleSelect should be removed.\n */\nbundle.helpers.peopleSelect.remove = container =>\n  ReactDOM.unmountComponentAtNode(container);\n","// Below is an example of exposing a library globally so that it can be used in\n// the content of a Kinetic Core form. The library itself will determine\n// somewhat how this happens, for example some like the one shown below return\n// something that you have to manually add to 'window'. Some libraries might add\n// themselves to the window when loaded or some might decorate something else,\n// like a jQuery plugin.\n// Note that the example below shows jquery but jquery is not currently\n// configured as a dependency so for this code to work jquery needs to be added\n// as a dependency and installed.\n\nimport jquery from 'jquery';\nimport moment from 'moment';\nimport underscore from 'underscore';\nimport 'bootstrap-select/dist/css/bootstrap-select.css';\nimport './lib/kd-typeahead/kd-typeahead.css';\nimport 'mdn-polyfills/Element.prototype.matches';\nimport 'mdn-polyfills/Element.prototype.closest';\nimport 'mdn-polyfills/Node.prototype.remove';\n\njquery.ajaxSetup({\n  xhrFields: {\n    withCredentials: true,\n  },\n});\n\nwindow.$ = jquery;\nwindow.jQuery = jquery;\nwindow.moment = moment;\nwindow._ = underscore;\n// This is required for kd-typeahead\nwindow.Bloodhound = require('typeahead.js');\n\nrequire('datatables.net');\nrequire('datatables.net-responsive');\nrequire('datatables.net-dt/css/jquery.dataTables.css');\nrequire('datatables.net-responsive-bs/css/responsive.bootstrap.css');\n\nrequire('bootstrap-select/dist/js/bootstrap-select');\nrequire('./lib/kd-typeahead/kd-typeahead');\nrequire('./lib/kd-dataviewer/kd-dataviewer');\nrequire('./lib/bundle/helpers');\n"],"sourceRoot":""}